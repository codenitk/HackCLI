#! /usr/bin/env python3


import sys, subprocess
from time import sleep
from requests import post
from os.path import expanduser, isfile

HOME = expanduser("~")


def edit():
    if len(sys.argv) != 3:
        print('Invalid number of arguments!')
        print('Usage: he edit <File Name>')
        exit(1)
    overallSettings=dict()
    with open(HOME + "/.he_conf","r") as conf:
        for line in conf:
            settings = line.split(":")
            settings[1]=settings[1][:-1]
            overallSettings[settings[0]] = settings[1]
    if isfile(overallSettings['FILEPATH'] + sys.argv[2]) == False:
        subprocess.call(["cp",overallSettings["TEMPLATE"],sys.argv[2]])
    subprocess.call([overallSettings["EDITOR"],overallSettings['FILEPATH'] + sys.argv[2]])

def submit():
    CLIENT_ID = ""
    CLIENT_SECRET = ""
    LANG = ""
    SOURCE = ""
    filepath = ""
    with open(HOME + "/.he_conf","r") as conf:
        for line in conf:
            settings = line.split(":")
            settings[1]=settings[1][:-1]
            if settings[0]=="CLIENT_ID":
                CLIENT_ID = settings[1]
            if settings[0]=="CLIENT_SECRET":
                CLIENT_SECRET = settings[1]
            if settings[0]=="LANG":
                LANG = settings[1]
            if settings[0]=="FILEPATH":
                filepath = settings[1]
    if len(sys.argv) != 5:
        print('Invalid number of arguments!')
        print('Usage: he submit <Contest Name> <Problem Name> <File Name>')
        exit(1)
    fileName = filepath + sys.argv[4]
    with open(fileName,"r") as conf:
        SOURCE = conf.read()

    data = {
        'client_id':CLIENT_ID,
        'client_secret':CLIENT_SECRET,
        'lang':LANG,
        'source':SOURCE
    }

    response = post("https://api.hackerearth.com/hackathon/v1/live-events/", data=data).json()
    live_events = response['live_events']
    isContestNameCorrect = False
    for events in live_events:
        if events['title'] == sys.argv[2]:
            isContestNameCorrect = True
            contestUUID = events['uuid']
    if isContestNameCorrect == True:
        response = post("https://api.hackerearth.com/hackathon/v1/" + contestUUID + "/problems/", data=data).json()
        problems = response['problems']
        problem_exists = False
        problemHash = ""
        problemType = ""
        for problem in problems:
            if problem['title'] == sys.argv[3]:
                problem_exists = True
                problemHash = problem['hash']
                problemType = problem['type']
        if problem_exists == True:
            response = post("https://api.hackerearth.com/hackathon/v1/" + contestUUID + "/problem/" + problemType + "/" + problemHash + "/run/" , data=data).json()
            if response['mcode'] == "SUCCESS":
                print("Submitting...")
                sleep(3)
                print("Compiling...")
                sleep(3)
                print("Running...")
                sleep(3)
                print("Fetching results...")
                sleep(3)
                submission_id = response['submission']['id']
                r = post("https://api.hackerearth.com/hackathon/v1/" + contestUUID + "/problem/algorithm/" + problemHash + "/submission/"+str(submission_id)+"/" , data=data).json()
                print("Submission id -",r['submission']['id'])
                print("Result -",r['submission']['result'])
                print("Memory -",r['submission']['memory'])
                print("Time -",r['submission']['time'])
                print("Score -",r['submission']['score'])
            else:
                print("Error while submitting! Please try later!")
        else:
            print("Problem doesn't exist in " + sys.argv[2])
    else:
        print("Please enter correct contest name")


def whatTypeOfContestIsThis(contestName):
    if 'Hiring' in contestName:
        return "Hiring"
    elif 'Easy' in contestName or 'Clash' in contestName or 'Circuits' in contestName:
        return "Real Contest"
    else:
        return "Hackathon"


def view():
    CLIENT_ID = ""
    CLIENT_SECRET = ""
    BROWSER = ""

    with open(HOME + '/.he_conf', "r") as conf:
        for line in conf:
            settings = line.split(':')
            settings[1]=settings[1][:-1]
            if settings[0] == "CLIENT_ID":
                CLIENT_ID = settings[1]
            if settings[0] == "CLIENT_SECRET":
                CLIENT_SECRET = settings[1]
            if settings[0] == "BROWSER":
                BROWSER = settings[1]

    data = {
        'client_id' : CLIENT_ID,
        'client_secret' : CLIENT_SECRET
    }

    if len(sys.argv) == 3:
        response = post('https://api.hackerearth.com/hackathon/v1/live-events/', data=data).json()
        live_events = response['live_events']
        if sys.argv[2] == 'live-contests':
            print("List of contests")
            x = 1
            for events in live_events:
                print(str(x) + ".", events['title'])
                x += 1
        else:
            event_exists = False
            eventUUID = ""
            for events in live_events:
                if events['title'] == sys.argv[2]:
                    eventUUID = events['uuid']
                    event_exists = True
                    break
            if event_exists == True:
                response = post('https://api.hackerearth.com/hackathon/v1/' + eventUUID + '/problems/', data=data).json()
                problems = response['problems']
                print("List of problems of " + sys.argv[2])
                x = 1
                for problem in problems:
                    print(str(x) + ".", problem['title'])
                    x += 1
            else:
                print("Please enter correct contest name")
    elif len(sys.argv) == 4:
        response = post('https://api.hackerearth.com/hackathon/v1/live-events/', data=data).json()
        live_events = response['live_events']
        if sys.argv[1] == 'live-contests':
            for events in live_events:
                print(events['title'])
        else:
            event_exists = False
            eventUUID = ""
            for events in live_events:
                if events['title'] == sys.argv[2]:
                    eventUUID = events['uuid']
                    event_exists = True
                    break
            if event_exists == True:
                response = post('https://api.hackerearth.com/hackathon/v1/' + eventUUID + '/problems/', data=data).json()
                problems = response['problems']
                problem_exists = False
                problem_hash = ''
                problem_type = ''
                for problem in problems:
                    if problem['title'] == sys.argv[3]:
                        problem_exists = True
                        problem_hash = problem['hash']
                        problem_type = problem['type']
                        break
                if problem_exists == True:
                    contest_name = sys.argv[2]
                    event_type = whatTypeOfContestIsThis(contest_name)
                    contest_name = contest_name.lower().replace(' ', '-')
                    URL = 'https://www.hackerearth.com/'
                    if event_type == 'Hiring':
                        contest_name += '-1'
                        URL += contest_name + "/problems/" + problem_hash + '/'
                        command = [BROWSER, URL]
                        subprocess.Popen(command)
                    else:
                        URL += contest_name + "/" + problem_type + "/" + problem_hash + '/'
                        command = [BROWSER, URL]
                        subprocess.Popen(command)

                else:
                    print("Problem doesn't exist in", sys.argv[2])

            else:
                print("Please enter correct contest name")
    else:
        print("Invalid number of arguments!")
        print("Usage: he view live-contests/<Contest Name> [<Problem Name>]")



def show():
    if len(sys.argv) > 2:
        print("Invalid number of arguments!")
        print("Usage: he show")
        exit(1)
    else:
        with open(HOME + "/.he_conf","r") as conf:
            for line in conf:
                p = line.split(':')
                p[0] = p[0][:1] + p[0][1:].lower()
                p[1] = p[1][:-1]
                print(p[0]+ ":" + p[1] + "\n")


def help1():
    print("Usage: he <Command>")
    print("Possible commands are:")
    print("1. he show:                                                 To display all the settings")
    print("2. he view live-contests / <Contest Name> [<Problem Name>]: To view live events / live contest problems and also to open a particular problem in browser")
    print("3. he edit <File Name>:                                     To edit a particular file")
    print("4. he submit <Contest Name> <Problem Name> <File Name>:     To submit solution to a particular problem")
    print("5. he settings [option]:                                    To edit settings")

def validator():

    with open(HOME + '/.he_conf', 'r') as conf:
        for line in conf:
            setting = line.split(':')
            setting[1] = setting[1][:-1]
            if setting[1] == 'None':
                return setting[0]
    return 'valid'

def settings(something):
    overallSettings = ''
    if something == '':
        with open(HOME + "/.he_conf", "r") as conf:
            for line in conf:
                setting = line.split(":")
                if something == '':
                    capitalizeSomething = setting[0][:1] + setting[0][1:].lower()
                    path = input("Enter " + capitalizeSomething + ": ")
                    if path != '':
                        setting[1] = path + '\n'
                overallSettings += ':'.join(setting)
    else:
        with open(HOME + "/.he_conf", "r") as conf:
            for line in conf:
                setting = line.split(":")
                if something == setting[0].lower():
                    capitalizeSomething = setting[0][:1] + setting[0][1:].lower()
                    path = input("Enter " + capitalizeSomething + ": ")
                    setting[1] = path + '\n'
                overallSettings += ':'.join(setting)
    with open(HOME + "/.he_conf", "w") as conf:
        conf.write(overallSettings)

if __name__ == '__main__':
    if len(sys.argv) > 1:
        command = sys.argv[1]
        if command == "help":
            help1()
        elif command == 'settings':
            if len(sys.argv) == 3:
                something = sys.argv[2]
            else:
                something = ''
            settings(something)
            something = validator().lower()
            while something != 'valid':
                settings(something)
                something = validator().lower()
        elif command == 'show':
            show()
        elif command == 'edit':
            edit()
        elif command == 'view':
            view()
        elif command == 'submit':
            submit()
        else:
            print('Wrong Command!!')
    else:
        help1()
