#! /usr/bin/env python


from os.path import expanduser
import sys, json, subprocess

HOME = expanduser("~")

def set_something(something):
    capitalizeSomething = something[:1] + something[1:].lower()
    path = input("Enter " + capitalizeSomething + ": ")
    overallSettings = ""
    with open(HOME + "/.he_conf", "r") as conf:
        for line in conf:
            settings = line.split(':')
            if settings[0] == something:
                settings[1] = path + '\n'

            overallSettings += ':'.join(settings)
    with open(HOME + "/.he_conf", "w") as conf:
        conf.write(overallSettings)


def edit():
    overallSettings=dict()
    with open(HOME + "/.he_conf","r") as conf:
        for line in conf:
            settings = line.split(":")
            settings[1]=settings[1][:-1]
            overallSettings[settings[0]] = settings[1]
    for key in overallSettings.keys():
        if key=="EDITOR":
            if overallSettings[key]=="None":
                print("Please set your editor first!")
            else:
                if overallSettings["TEMPLATE"] != "None":
                    subprocess.call(["cp",overallSettings["TEMPLATE"],sys.argv[1]])
                subprocess.call([overallSettings["EDITOR"],sys.argv[1]])

def run():
    CLIENT_ID = ""
    CLIENT_SECRET = ""
    LANG = ""
    SOURCE = ""
    filepath = ""
    with open(HOME + "/.he_conf","r") as conf:
        for line in conf:
            settings = line.split(":")
            settings[1]=settings[1][:-1]
            if settings[0]=="CLIENT_ID":
                CLIENT_ID = settings[1]
            if settings[0]=="CLIENT_SECRET":
                CLIENT_SECRET = settings[1]
            if settings[0]=="LANG":
                LANG = settings[1]
            if settings[0]=="FILEPATH":
                filepath = settings[1]
    fileName = filepath + sys.argv[3]
    with open(fileName,"r") as conf:
        SOURCE = conf.read()

    data = {
        'client_id':CLIENT_ID,
        'client_secret':CLIENT_SECRET,
        'lang':LANG,
        'source':SOURCE
    }

    response = post("https://api.hackerearth.com/hackathon/v1/live-events/", data=data).json()
    live_events = response['live_events']
    isContestNameCorrect = False
    for events in live_events:
        if events['title'] == sys.argv[1]:
            isContestNameCorrect = True
            contestUUID = events['uuid']
    if isContestNameCorrect == True:
        response = post("https://api.hackerearth.com/hackathon/v1/" + contestUUID + "/problems/", data=data).json()
        problems = response['problems']
        problem_exists = False
        problemHash = ""
        problemType = ""
        for problem in problems:
            if problem['title'] == sys.argv[2]:
                problem_exists = True
                problemHash = problem['hash']
                problemType = problem['type']
        if problem_exists == True:
            response = post("https://api.hackerearth.com/hackathon/v1/" + contestUUID + "/problem/" + problemType + "/" + problemHash + "/run/" , data=data).json()
            if response['mcode'] == "SUCCESS":
                print("Submitting...")
                time.sleep(5)
                print("Compiling...")
                time.sleep(5)
                print("Running...")
                time.sleep(5)
                print("Fetching results...")
                time.sleep(5)
                submission_id = response['submission']['id']
                response = post("https://api.hackerearth.com/hackathon/v1/" + contestUUID + "/problem/algorithm/" + problemHash + "/submission/"+str(submission_id)+"/" , data=data).json()
                r=response
                print("Submission id -",r['submission']['id'])
                print("Result -",r['submission']['result'])
                print("Memory -",r['submission']['memory'])
                print("Time -",r['submission']['time'])
                print("Score -",r['submission']['score'])
            else:
                print("Kuch galat hai bhai!")
        else:
            print("Problem name galat hai!")
    else:
        print("Contest name sahi daal bc!")
        

def whatTypeOfContestIsThis(contestName):
    if 'Hiring' in contestName:
        return "Hiring"
    elif 'Easy' in contestName or 'Clash' in contestName or 'Circuits' in contestName:
        return "Real Contest"
    else:
        return "Hackathon?"


def view():
    CLIENT_ID = ""
    CLIENT_SECRET = ""
    BROWSER = ""

    with open(HOME + '/.he_conf', "r") as conf:
        for line in conf:
            settings = line.split(':')
            settings[1]=settings[1][:-1]
            if settings[0] == "CLIENT_ID":
                CLIENT_ID = settings[1]
            if settings[0] == "CLIENT_SECRET":
                CLIENT_SECRET = settings[1]
            if settings[0] == "BROWSER":
                BROWSER = settings[1]

    data = {
        'client_id' : CLIENT_ID,
        'client_secret' : CLIENT_SECRET
    }

    if len(sys.argv) == 2:
        response = post('https://api.hackerearth.com/hackathon/v1/live-events/', data=data).json()
        live_events = response['live_events']
        if sys.argv[1] == 'live-contests':
            for events in live_events:
                print(events['title'])
        else:
            event_exists = False
            eventUUID = ""
            for events in live_events:
                if events['title'] == sys.argv[1]:
                    eventUUID = events['uuid']
                    event_exists = True
                    break
            if event_exists == True:
                response = post('https://api.hackerearth.com/hackathon/v1/' + eventUUID + '/problems/', data=data).json()
                problems = response['problems']
                for problem in problems:
                    print(problem['title'])
            else:
                print("You are pathetic!! Can't even type a contest name correctly -_-")
    elif len(sys.argv) == 3:
        response = post('https://api.hackerearth.com/hackathon/v1/live-events/', data=data).json()
        live_events = response['live_events']
        if sys.argv[1] == 'live-contests':
            for events in live_events:
                print(events['title'])
        else:
            event_exists = False
            eventUUID = ""
            for events in live_events:
                if events['title'] == sys.argv[1]:
                    eventUUID = events['uuid']
                    event_exists = True
                    break
            if event_exists == True:
                response = post('https://api.hackerearth.com/hackathon/v1/' + eventUUID + '/problems/', data=data).json()
                problems = response['problems']
                problem_exists = False
                problem_hash = ''
                problem_type = ''
                for problem in problems:
                    if problem['title'] == sys.argv[2]:
                        problem_exists = True
                        problem_hash = problem['hash']
                        problem_type = problem['type']
                        break
                if problem_exists == True:
                    contest_name = sys.argv[1]
                    event_type = whatTypeOfContestIsThis(contest_name)
                    contest_name = contest_name.lower().replace(' ', '-')
                    URL = 'https://www.hackerearth.com/'
                    if event_type == 'Hiring':
                        contest_name += '-1'
                        URL += contest_name + "/problems/" + problem_hash + '/'
                        command = [BROWSER, URL]
                        subprocess.Popen(command)
                    else:
                        URL += contest_name + "/" + problem_type + "/" + problem_hash + '/'
                        command = [BROWSER, URL]
                        subprocess.Popen(command)

                else:
                    print("Problem doesn't exist!!")

            else:
                print("You are pathetic!! Can't even type a contest name correctly -_-")
    else:
        print("Invalid number of arguments, Fucker!")        
        


def show():
    with open(HOME + "/.he_conf","r") as conf:
        for line in conf:
            p = line.split(':')
            p[0] = p[0][:1] + p[0][1:].lower()
            p[1] = p[1][:-1]
            print(p[0]+ ":" + p[1] + "\n")




